# Generated by CodiumAI
from datetime import time

import pytest

from schemas.dataclasses import Item, ItemType, Address


class TestItem:
    #  Create an Item object with required weight attribute.
    def test_create_item_with_required_weight(self):
        item = Item(weight=10.0)
        assert item.weight == 10.0
        assert item.type == ItemType.ALL
        assert item.length is None
        assert item.width is None
        assert item.height is None
        assert item.value is None

    #  Create an Item object with all attributes.
    def test_create_item_with_all_attributes(self):
        item = Item(
            weight=10.0,
            type=ItemType.PACK,
            length=1.0,
            width=1.0,
            height=1.0,
            value=100.0,
        )
        assert item.weight == 10.0
        assert item.type == ItemType.PACK
        assert item.length == 1.0
        assert item.width == 1.0
        assert item.height == 1.0
        assert item.value == 100.0

    #  Call to_dict() method on an Item object.
    def test_to_dict_method(self):
        item = Item(
            weight=10.0,
            type=ItemType.PACK,
            length=1.0,
            width=1.0,
            height=1.0,
            value=100.0,
        )
        item_dict = item.to_dict()
        assert item_dict == {
            "weight": 10.0,
            "type": ItemType.PACK,
            "length": 1.0,
            "width": 1.0,
            "height": 1.0,
            "value": 100.0,
        }

    #  Create an Item object with weight attribute as 0.
    def test_create_item_with_zero_weight(self):
        item = Item(weight=0.0)
        assert item.weight == 0.0
        assert item.type == ItemType.ALL
        assert item.length is None
        assert item.width is None
        assert item.height is None
        assert item.value is None

    #  Create an Item object with negative weight attribute.
    def test_create_item_with_negative_weight(self):
        item = Item(weight=-10.0)
        assert item.weight == -10.0
        assert item.type == ItemType.ALL
        assert item.length is None
        assert item.width is None
        assert item.height is None
        assert item.value is None

    #  Create an Item object with type attribute as an invalid ItemType value.
    def test_create_item_with_invalid_type(self):
        with pytest.raises(ValueError):
            item = Item(
                weight=10.0,
                type="INVALID_TYPE",
                length=1.0,
                width=1.0,
                height=1.0,
                value=100.0,
            )

    # Generated by CodiumAI

# Generated by CodiumAI


class TestAddress:

    #  Create an Address object with all required attributes.
    def test_create_address_with_required_attributes(self):
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City"
        )
        assert address.company_name == "Company"
        assert address.address_line1 == "123 Main St"
        assert address.postal_code == "12345"
        assert address.city == "City"
        assert address.open_from is None
        assert address.open_to is None
        assert address.address_line2 is None
        assert address.county is None
        assert address.country_code == "GB"
        assert address.person_name is None
        assert address.phone_number is None
        assert address.email is None

    #  Create an Address object with all attributes.
    def test_create_address_with_all_attributes(self):
        open_from = time(hour=9, minute=0)
        open_to = time(hour=17, minute=0)
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City",
            open_from=open_from,
            open_to=open_to,
            address_line2="Apt 2",
            county="County",
            country_code="US",
            person_name="John Doe",
            phone_number="123-456-7890",
            email="john@example.com"
        )
        assert address.company_name == "Company"
        assert address.address_line1 == "123 Main St"
        assert address.postal_code == "12345"
        assert address.city == "City"
        assert address.open_from == open_from
        assert address.open_to == open_to
        assert address.address_line2 == "Apt 2"
        assert address.county == "County"
        assert address.country_code == "US"
        assert address.person_name == "John Doe"
        assert address.phone_number == "123-456-7890"
        assert address.email == "john@example.com"

    #  Create an Address object with all attributes and a valid country code.
    def test_create_address_with_valid_country_code(self):
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City",
            country_code="US"
        )
        assert address.country_code == "US"

    #  Create an Address object with an empty company_name.
    def test_create_address_with_empty_company_name(self):
        add = Address(
                company_name="",
                address_line1="123 Main St",
                postal_code="12345",
                city="City"
            )
        assert add.country_code == "GB"

    #  Create an Address object with an empty address_line1.
    def test_create_address_with_empty_address_line1(self):
        with pytest.raises(ValueError):
            Address(
                company_name="Company",
                address_line1="",
                postal_code="12345",
                city="City"
            )

    #  Create an Address object with an empty postal_code.
    def test_create_address_with_empty_postal_code(self):
        with pytest.raises(ValueError):
            Address(
                company_name="Company",
                address_line1="123 Main St",
                postal_code="",
                city="City"
            )

    #  Create an Address object with all attributes and a valid country code as lowercase.
    def test_valid_country_code_lowercase(self):
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City",
            country_code="gb"
        )
        assert address.country_code == "gb"

    #  Create an Address object with all attributes and a valid country code as uppercase.
    def test_valid_country_code_uppercase(self):
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City",
            country_code="GB"
        )
        assert address.country_code == "GB"

    #  Create an Address object with all attributes and a valid country code as mixed case.
    def test_valid_country_code_mixed_case(self):
        address = Address(
            company_name="Company",
            address_line1="123 Main St",
            postal_code="12345",
            city="City",
            country_code="gB"
        )
        assert address.country_code == "gB"
