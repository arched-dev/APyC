# Generated by CodiumAI

from apc.schemas.models import Services


class TestServices:
    #  Services object can be created with a list of dictionaries
    def test_create_services_with_list_of_dictionaries(self):
        services = Services(
            [
                {"name": "Service A", "status": "Active"},
                {"name": "Service B", "status": "Inactive"},
            ]
        )
        assert len(services.records) == 2
        assert services.records[0]["name"] == "Service A"
        assert services.records[1]["status"] == "Inactive"

    #  Queryable attributes can be accessed by their keys
    def test_access_queryable_attributes_by_keys(self):
        services = Services(
            [
                {"name": "Service A", "status": "Active"},
                {"name": "Service B", "status": "Inactive"},
            ]
        )
        assert services.name == services["name"]
        assert services.status == services["status"]

    #  Records can be filtered by a single condition
    def test_filter_records_by_single_condition(self):
        services = Services(
            [
                {"name": "Service A", "status": "Active"},
                {"name": "Service B", "status": "Inactive"},
            ]
        )
        filtered_services = services.filter(services.status == "Active")
        assert len(filtered_services.records) == 1
        assert filtered_services.records[0]["name"] == "Service A"

    #  Services object can be created with an empty list
    def test_create_services_with_empty_list(self):
        services = Services([])
        assert len(services.records) == 0

    #  Records can be filtered by a condition on an empty list of records
    def test_filter_records_on_empty_list(self):
        services = Services([])
        filtered_services = services.filter(services.status == "Active")
        assert len(filtered_services.records) == 0

    #  Records can be filtered by a condition on an attribute that does not exist in any record
    def test_filter_records_on_nonexistent_attribute(self):
        services = Services(
            [
                {"name": "Service A", "status": "Active"},
                {"name": "Service B", "status": "Inactive"},
            ]
        )
        filtered_services = services.filter(services.nonexistent_attribute == "Value")
        assert len(filtered_services.records) == 0
